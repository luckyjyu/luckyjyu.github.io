<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lucky&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-09-01T13:25:31.901Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lucky</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>链表题目</title>
    <link href="http://yoursite.com/2020/09/01/%E9%93%BE%E8%A1%A8%E9%A2%98%E7%9B%AE/"/>
    <id>http://yoursite.com/2020/09/01/%E9%93%BE%E8%A1%A8%E9%A2%98%E7%9B%AE/</id>
    <published>2020-09-01T12:40:57.290Z</published>
    <updated>2020-09-01T13:25:31.901Z</updated>
    
    <content type="html"><![CDATA[<h4 id="剑指-Offer-22-链表中倒数第k个节点"><a href="#剑指-Offer-22-链表中倒数第k个节点" class="headerlink" title="剑指 Offer 22. 链表中倒数第k个节点"></a><a href="https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/" target="_blank" rel="noopener">剑指 Offer 22. 链表中倒数第k个节点</a></h4><p>输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。例如，一个链表有6个节点，从头节点开始，它们的值依次是1、2、3、4、5、6。这个链表的倒数第3个节点是值为4的节点。</p><p><strong>示例：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 k &#x3D; 2.</span><br><span class="line"></span><br><span class="line">返回链表 4-&gt;5.</span><br></pre></td></tr></table></figure></div><p>解题思路：使用双指针，首先first指针指向第一个节点，last指针往后走k-1步，之后两个指针一起往后移动直到last走到了最后一个节点（即last-&gt;next==NULL）停止，此时，first指向的节点即为所求的倒数第k个节点</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">getKthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        ListNode *first=head;</span><br><span class="line">        ListNode *last=first;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k<span class="number">-1</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            last=last-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(last-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            first=first-&gt;next;</span><br><span class="line">            last=last-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> first;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><h4 id="剑指-Offer-24-反转链表"><a href="#剑指-Offer-24-反转链表" class="headerlink" title="剑指 Offer 24. 反转链表"></a><a href="https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/" target="_blank" rel="noopener">剑指 Offer 24. 反转链表</a></h4><p>定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。</p><p><strong>示例:</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class="line">输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</span><br></pre></td></tr></table></figure></div><p><strong>限制：</strong></p><p><code>0 &lt;= 节点个数 &lt;= 5000</code></p><p><strong>注意</strong>：本题与主站 206 题相同：<a href="https://leetcode-cn.com/problems/reverse-linked-list/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-linked-list/</a></p><p>解题思路：</p><p>​    设置双指针，一个first，一个last，first指向前面，last指向first的下一个节点；last首先指向head，first指向NULL，之后保存last-&gt;next后，将last-&gt;next指向first实现局部翻转，之后两个指针同时向后移动，直到last==NULL为止。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode *first=<span class="literal">NULL</span>;</span><br><span class="line">        ListNode *last=head;</span><br><span class="line">        <span class="keyword">while</span>(last!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ListNode *temp=last-&gt;next;</span><br><span class="line">            <span class="comment">//局部反转</span></span><br><span class="line">            last-&gt;next=first;</span><br><span class="line">            <span class="comment">//向后移动</span></span><br><span class="line">            first=last;</span><br><span class="line">            last=temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> first;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><h4 id="剑指-Offer-17-打印从1到最大的n位数"><a href="#剑指-Offer-17-打印从1到最大的n位数" class="headerlink" title="剑指 Offer 17. 打印从1到最大的n位数"></a><a href="https://leetcode-cn.com/problems/da-yin-cong-1dao-zui-da-de-nwei-shu-lcof/" target="_blank" rel="noopener">剑指 Offer 17. 打印从1到最大的n位数</a></h4><p>输入数字 <code>n</code>，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大的 3 位数 999。</p><p><strong>示例 1:</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: n &#x3D; 1</span><br><span class="line">输出: [1,2,3,4,5,6,7,8,9]</span><br></pre></td></tr></table></figure></div><p>说明：</p><ul><li>用返回一个整数列表来代替打印</li><li>n 为正整数</li></ul><p>解题思路：</p><p>​    由于本题要求返回int类型的数组，所以最后数的范围一定不超过int类型数的表示范围，n位数字可以表示的最大数字是n个9=10^n-1，例如999=1000-1=10^3-1。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">printNumbers</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">max</span>=<span class="built_in">pow</span>(<span class="number">10</span>,n)<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">max</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            result.push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p>​    现在还不太会用递归，该题进阶就是要考虑大数越界的问题，此时转换为string类型进行存储，也就是n个数字全排列的问题，不会。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;剑指-Offer-22-链表中倒数第k个节点&quot;&gt;&lt;a href=&quot;#剑指-Offer-22-链表中倒数第k个节点&quot; class=&quot;headerlink&quot; title=&quot;剑指 Offer 22. 链表中倒数第k个节点&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://le
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>FPGA/verilog之简单模块设计联系</title>
    <link href="http://yoursite.com/2020/09/01/FPGA/verilog%E4%B9%8B%E7%AE%80%E5%8D%95%E6%A8%A1%E5%9D%97%E8%AE%BE%E8%AE%A1%E8%81%94%E7%B3%BB/"/>
    <id>http://yoursite.com/2020/09/01/FPGA/verilog%E4%B9%8B%E7%AE%80%E5%8D%95%E6%A8%A1%E5%9D%97%E8%AE%BE%E8%AE%A1%E8%81%94%E7%B3%BB/</id>
    <published>2020-09-01T11:15:51.954Z</published>
    <updated>2020-09-01T12:31:00.183Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、简单模块设计"><a href="#1、简单模块设计" class="headerlink" title="1、简单模块设计"></a>1、简单模块设计</h3><p>中间为乘法，长方形是一个D触发器</p><p><a href="/../../images/fpga/1598958988484.png" data-fancybox="group" data-caption="1598958988484" class="fancybox"><img alt="1598958988484" data-src="/../../images/fpga/1598958988484.png" class="lazyload" title="1598958988484"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">verilog</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> mul_module(</span><br><span class="line">    mul_a,</span><br><span class="line">    mul_b,</span><br><span class="line">    clk,</span><br><span class="line">    rst_n,</span><br><span class="line">    mul_result</span><br><span class="line">);</span><br><span class="line">    <span class="comment">//参数化实现</span></span><br><span class="line">    <span class="keyword">parameter</span> A_W = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">parameter</span> B_W = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">parameter</span> C_W = A_W + B_W;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">input</span>[A_W-<span class="number">1</span>:<span class="number">0</span>] mul_a;</span><br><span class="line">    <span class="keyword">input</span>[B_W-<span class="number">1</span>:<span class="number">0</span>] mul_b;</span><br><span class="line">    <span class="keyword">input</span> clk;</span><br><span class="line">    <span class="keyword">input</span> rst_n;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">output</span>[C_W-<span class="number">1</span>:<span class="number">0</span>] mul_result;</span><br><span class="line">    <span class="comment">//定义数据类型，input不需要定义</span></span><br><span class="line">    <span class="keyword">reg</span>   [C_W-<span class="number">1</span>:<span class="number">0</span>] mul_result;</span><br><span class="line">    <span class="keyword">reg</span>   [C_W-<span class="number">1</span>:<span class="number">0</span>] mul_result_tmp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//组合逻辑</span></span><br><span class="line">    <span class="keyword">always</span>@(*)<span class="keyword">begin</span></span><br><span class="line">        mul_result_tmp = mul_a*mul_b;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//时序逻辑--异步复位</span></span><br><span class="line">    <span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n)<span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(rst_n == <span class="number">1'b0</span>)<span class="keyword">begin</span></span><br><span class="line">            mul_result &lt;= <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            mul_result &lt;= mul_result_tmp;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure></div><h3 id="2、复杂模块设计"><a href="#2、复杂模块设计" class="headerlink" title="2、复杂模块设计"></a>2、复杂模块设计</h3><p><a href="/../../images/fpga/1598960350853.png" data-fancybox="group" data-caption="1598960350853" class="fancybox"><img alt="1598960350853" data-src="/../../images/fpga/1598960350853.png" class="lazyload" title="1598960350853"></a></p><p>给一些为给出的信号命名</p><p><a href="/../../images/fpga/1598961524399.png" data-fancybox="group" data-caption="1598961524399" class="fancybox"><img alt="1598961524399" data-src="/../../images/fpga/1598961524399.png" class="lazyload" title="1598961524399"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">verilog</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> mul2port(</span><br><span class="line">    <span class="comment">//定义输入输出信号</span></span><br><span class="line">    din_a,</span><br><span class="line">    din_b,</span><br><span class="line">    din_c,</span><br><span class="line">    din_d,</span><br><span class="line">    sel_a,</span><br><span class="line">    sel_b</span><br><span class="line">    </span><br><span class="line">    clk,</span><br><span class="line">    rst_n,</span><br><span class="line">    </span><br><span class="line">    result_a,</span><br><span class="line">    result_b</span><br><span class="line">);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//输入输入声明</span></span><br><span class="line">    <span class="keyword">input</span>[<span class="number">2</span>:<span class="number">0</span>] din_a,</span><br><span class="line">    <span class="keyword">input</span>[<span class="number">1</span>:<span class="number">0</span>] din_b,</span><br><span class="line">    <span class="keyword">input</span>[<span class="number">3</span>:<span class="number">0</span>] din_c,</span><br><span class="line">    <span class="keyword">input</span>[<span class="number">3</span>:<span class="number">0</span>] din_d,</span><br><span class="line">    <span class="comment">//默认1bit</span></span><br><span class="line">    <span class="keyword">input</span> sel_a,</span><br><span class="line">    <span class="keyword">input</span> sel_b</span><br><span class="line">    <span class="keyword">input</span> clk,</span><br><span class="line">    <span class="keyword">input</span> rst_n,</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">output</span> result_a,</span><br><span class="line">    <span class="keyword">output</span> result_b</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//信号类型定义</span></span><br><span class="line">    <span class="keyword">reg</span>[<span class="number">2</span>:<span class="number">0</span>] result_a;</span><br><span class="line">    <span class="keyword">reg</span>[<span class="number">1</span>:<span class="number">0</span>] result_b;</span><br><span class="line">    <span class="keyword">reg</span>[<span class="number">3</span>:<span class="number">0</span>] sel_dout;<span class="comment">//always产生</span></span><br><span class="line">    <span class="keyword">wire</span>[<span class="number">6</span>:<span class="number">0</span>] result_a_tmp;<span class="comment">//例化产生</span></span><br><span class="line">    <span class="keyword">wire</span>[<span class="number">5</span>:<span class="number">0</span>] result_b_tmp;<span class="comment">//例化产生</span></span><br><span class="line">    <span class="keyword">reg</span> sel;<span class="comment">//always产生</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//s设计思路从后往前</span></span><br><span class="line">    <span class="comment">//时序逻辑--异步复位</span></span><br><span class="line">    <span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n)<span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(rst_n==<span class="number">1'b0</span>)<span class="keyword">begin</span></span><br><span class="line">            result_b&lt;=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">           result_b&lt;=result_b_tmp; </span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n)<span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(rst_n==<span class="number">1'b0</span>)<span class="keyword">begin</span></span><br><span class="line">            result_a&lt;=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            result_a&lt;=result_a_tmp;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//例化</span></span><br><span class="line">    mul_module<span class="variable">#(.A_W(3),.B_W(4))</span> mul_4_3(</span><br><span class="line">        <span class="variable">.mul_a</span>(din_a),</span><br><span class="line">        <span class="variable">.mul_b</span>(sel_dout),</span><br><span class="line">        <span class="variable">.clk</span>(clk),</span><br><span class="line">        <span class="variable">.rst_n</span>(rst_n),</span><br><span class="line">        <span class="variable">.mul_result</span>(result_a_tmp)</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    mul_module<span class="variable">#(.A_W(2),.B_W(4))</span> mul_4_2(</span><br><span class="line">        <span class="variable">.mul_a</span>(din_b),</span><br><span class="line">        <span class="variable">.mul_b</span>(sel_dout),</span><br><span class="line">        <span class="variable">.clk</span>(clk),</span><br><span class="line">        <span class="variable">.rst_n</span>(rst_n),</span><br><span class="line">        <span class="variable">.mul_result</span>(result_b_tmp)</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">//组合逻辑</span></span><br><span class="line">    <span class="keyword">always</span>@(*)<span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(sel==<span class="number">1'b0</span>)<span class="keyword">begin</span></span><br><span class="line">            sel_dout=din_c;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            sel_dout=din_d;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//时序逻辑</span></span><br><span class="line">    <span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n)<span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(rst_n==<span class="number">1'b0</span>)<span class="keyword">begin</span></span><br><span class="line">            sel&lt;=<span class="number">1'b0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            sel&lt;=set_a&amp;set_b;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span>   </span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、简单模块设计&quot;&gt;&lt;a href=&quot;#1、简单模块设计&quot; class=&quot;headerlink&quot; title=&quot;1、简单模块设计&quot;&gt;&lt;/a&gt;1、简单模块设计&lt;/h3&gt;&lt;p&gt;中间为乘法，长方形是一个D触发器&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/../../images
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>FPGA/verilog之运算符</title>
    <link href="http://yoursite.com/2020/09/01/FPGA/verilog%E4%B9%8B%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>http://yoursite.com/2020/09/01/FPGA/verilog%E4%B9%8B%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2020-09-01T09:33:51.189Z</published>
    <updated>2020-09-01T11:04:50.657Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、信号类型reg-wire"><a href="#一、信号类型reg-wire" class="headerlink" title="一、信号类型reg/wire"></a>一、信号类型reg/wire</h2><p>1、设计代码仅用reg和wire</p><p>2、设计代码：由本模块产生且是用always产生的信号，则reg类型</p><p>3、测试代码：用initial产生的信号（一般是对测试模块的输入），用reg类型</p><p>4、其他都用wire</p><p>5、reg类型的信号，不一定产生寄存器！</p><h4 id="区分以下信号是用reg类型还是用wire类型"><a href="#区分以下信号是用reg类型还是用wire类型" class="headerlink" title="区分以下信号是用reg类型还是用wire类型"></a>区分以下信号是用reg类型还是用wire类型</h4><p>a）eoc_cnt用reg类型，因为该信号是由本模块产生，并且是在always中产生的</p><p><a href="/../../images/fpga/1598953187297.png" data-fancybox="group" data-caption="1598953187297" class="fancybox"><img alt="1598953187297" data-src="/../../images/fpga/1598953187297.png" class="lazyload" title="1598953187297"></a></p><p>b）row1_data和row2_data用wire类型，是在本模块产生，但是不是由always产生，是由例化产生</p><p><a href="/../../images/fpga/1598953291242.png" data-fancybox="group" data-caption="1598953291242" class="fancybox"><img alt="1598953291242" data-src="/../../images/fpga/1598953291242.png" class="lazyload" title="1598953291242"></a></p><p>c）rdreq_cfg用reg类型，在本模块产生，由always产生</p><p><a href="/../../images/fpga/1598953437697.png" data-fancybox="group" data-caption="1598953437697" class="fancybox"><img alt="1598953437697" data-src="/../../images/fpga/1598953437697.png" class="lazyload" title="1598953437697"></a></p><p>d）sdata用wire类型，不是always产生</p><p><a href="/../../images/fpga/1598956658152.png" data-fancybox="group" data-caption="1598956658152" class="fancybox"><img alt="1598956658152" data-src="/../../images/fpga/1598956658152.png" class="lazyload" title="1598956658152"></a></p><h2 id="二、参数parameter"><a href="#二、参数parameter" class="headerlink" title="二、参数parameter"></a>二、参数parameter</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">verilog</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">parameter</span> CNT_C_W=<span class="number">12</span>;</span><br></pre></td></tr></table></figure></div><p>1、简单一句话，就是将整个模块内的CNT_C_W替换成12</p><p>2、要求参数名大写</p><h2 id="三、算术运算符"><a href="#三、算术运算符" class="headerlink" title="三、算术运算符"></a>三、算术运算符</h2><p><a href="/../../images/fpga/1598956888121.png" data-fancybox="group" data-caption="1598956888121" class="fancybox"><img alt="1598956888121" data-src="/../../images/fpga/1598956888121.png" class="lazyload" title="1598956888121"></a></p><p>1、+、-、*（用的多，逻辑简单）、/、%（用得少，逻辑复杂）</p><h2 id="四、关系运算符"><a href="#四、关系运算符" class="headerlink" title="四、关系运算符"></a>四、关系运算符</h2><p><a href="/../../images/fpga/1598956962046.png" data-fancybox="group" data-caption="1598956962046" class="fancybox"><img alt="1598956962046" data-src="/../../images/fpga/1598956962046.png" class="lazyload" title="1598956962046"></a></p><p>1、&gt;=、&lt;=、==、&gt;、&lt;</p><p>2、一般用于条件判断</p><h2 id="五、赋值运算符"><a href="#五、赋值运算符" class="headerlink" title="五、赋值运算符"></a>五、赋值运算符</h2><p>1、时序逻辑（用了复位和时钟信号的）用“&lt;=”</p><p><a href="/../../images/fpga/1598957038640.png" data-fancybox="group" data-caption="1598957038640" class="fancybox"><img alt="1598957038640" data-src="/../../images/fpga/1598957038640.png" class="lazyload" title="1598957038640"></a></p><p>2、组合逻辑用“=”</p><p><a href="/../../images/fpga/1598957064257.png" data-fancybox="group" data-caption="1598957064257" class="fancybox"><img alt="1598957064257" data-src="/../../images/fpga/1598957064257.png" class="lazyload" title="1598957064257"></a></p><h2 id="六、逻辑运算符"><a href="#六、逻辑运算符" class="headerlink" title="六、逻辑运算符"></a>六、逻辑运算符</h2><p><a href="/../../images/fpga/1598957214068.png" data-fancybox="group" data-caption="1598957214068" class="fancybox"><img alt="1598957214068" data-src="/../../images/fpga/1598957214068.png" class="lazyload" title="1598957214068"></a></p><p>1、&amp;&amp;、||、！</p><p>2、一般两边都是1bit信号</p><p>3、一般用于条件判断</p><p>4、4’b1011&amp;&amp;4’b0100，容易引起歧义，一般不使用</p><h2 id="七、位运算符"><a href="#七、位运算符" class="headerlink" title="七、位运算符"></a>七、位运算符</h2><p><a href="/../../images/fpga/1598957372964.png" data-fancybox="group" data-caption="1598957372964" class="fancybox"><img alt="1598957372964" data-src="/../../images/fpga/1598957372964.png" class="lazyload" title="1598957372964"></a></p><p>1、~、|、^、&amp;</p><p>2、一般用于赋值</p><p>3、4’b1011 | 4’b0100 = 4’b1111</p><p>4、4’b1011 &amp; 4’b0100 = 4‘b1000</p><p>5、4’b1011 ^ 4’b0100 = 4’b1111</p><p>6、~4’b1011 = 4b’0100</p><h2 id="八、移位运算符"><a href="#八、移位运算符" class="headerlink" title="八、移位运算符"></a>八、移位运算符</h2><p><a href="/../../images/fpga/1598957569798.png" data-fancybox="group" data-caption="1598957569798" class="fancybox"><img alt="1598957569798" data-src="/../../images/fpga/1598957569798.png" class="lazyload" title="1598957569798"></a></p><p>1、&lt;&lt;，&gt;&gt;</p><p>2、一般用于乘除运算</p><p>3、右移1位==除2，右移2位==除4，右移3位==除8</p><p>4、左移1位==乘2，左移2位==乘4，左移3位==乘8</p><h2 id="九、拼接运算符"><a href="#九、拼接运算符" class="headerlink" title="九、拼接运算符"></a>九、拼接运算符</h2><p><a href="/../../images/fpga/1598957809173.png" data-fancybox="group" data-caption="1598957809173" class="fancybox"><img alt="1598957809173" data-src="/../../images/fpga/1598957809173.png" class="lazyload" title="1598957809173"></a></p><p>1、应用于参数化</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、信号类型reg-wire&quot;&gt;&lt;a href=&quot;#一、信号类型reg-wire&quot; class=&quot;headerlink&quot; title=&quot;一、信号类型reg/wire&quot;&gt;&lt;/a&gt;一、信号类型reg/wire&lt;/h2&gt;&lt;p&gt;1、设计代码仅用reg和wire&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>FPGA/verilog之模块例化</title>
    <link href="http://yoursite.com/2020/09/01/FPGA/verilog%E4%B9%8B%E6%A8%A1%E5%9D%97%E4%BE%8B%E5%8C%96/"/>
    <id>http://yoursite.com/2020/09/01/FPGA/verilog%E4%B9%8B%E6%A8%A1%E5%9D%97%E4%BE%8B%E5%8C%96/</id>
    <published>2020-09-01T09:07:01.984Z</published>
    <updated>2020-09-01T11:04:00.543Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、什么是例化"><a href="#一、什么是例化" class="headerlink" title="一、什么是例化"></a>一、什么是例化</h2><p>​    如果一个模块不是顶层模块，就一般会被其他模块使用，所以需要对模块进行例化为其他上一层模块所使用，即将其输入输出接口定义好。有了例化就可以从一个简单的电路开始，一直搭建变成一个复杂的电路。</p><p>如图是对USB接口进行例化，就可以使用该模块所实现的功能</p><p><a href="/../../images/fpga/1598951449611.png" data-fancybox="group" data-caption="1598951449611" class="fancybox"><img alt="1598951449611" data-src="/../../images/fpga/1598951449611.png" class="lazyload" title="1598951449611"></a></p><h2 id="二、例化方法"><a href="#二、例化方法" class="headerlink" title="二、例化方法"></a>二、例化方法</h2><p>设计的模块：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">verilog</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> uart(</span><br><span class="line">    clk,</span><br><span class="line">    rst_n,</span><br><span class="line">    vld_in,</span><br><span class="line">    data_in,</span><br><span class="line">    uart_out,</span><br><span class="line">    uart_in,</span><br><span class="line">    vld_out,</span><br><span class="line">    data_out,</span><br><span class="line">    rdy_in</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div><p>将模块例化，uart为设计的模块名，u_uart为例化模块名，（.变量）是设计模块的信号，括号内部是例化模块的信号，实现了设计模块与例化模块的一一对应：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">uart u_uart(</span><br><span class="line">    .clk      (clk_100m),</span><br><span class="line">    .rst_n    (sys_rst_n),</span><br><span class="line">    .vld_in   (bt_data_out_vld),</span><br><span class="line">    .data_in  (bt_data_out),</span><br><span class="line">    .uart_out (uart_tx),</span><br><span class="line">    .uart_in  (uart_rx),</span><br><span class="line">    .vld_out  (uart_data_out_vld),</span><br><span class="line">    .data_out (uart_data_out),</span><br><span class="line">    .rdy_in   (uart_in_rdy)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div><h2 id="三、参数例化"><a href="#三、参数例化" class="headerlink" title="三、参数例化"></a>三、参数例化</h2><p>实现将位宽为8的uart到位宽为16的转变</p><p><a href="/../../images/fpga/1598952671936.png" data-fancybox="group" data-caption="1598952671936" class="fancybox"><img alt="1598952671936" data-src="/../../images/fpga/1598952671936.png" class="lazyload" title="1598952671936"></a></p><p><a href="/../../images/fpga/1598952700335.png" data-fancybox="group" data-caption="1598952700335" class="fancybox"><img alt="1598952700335" data-src="/../../images/fpga/1598952700335.png" class="lazyload" title="1598952700335"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、什么是例化&quot;&gt;&lt;a href=&quot;#一、什么是例化&quot; class=&quot;headerlink&quot; title=&quot;一、什么是例化&quot;&gt;&lt;/a&gt;一、什么是例化&lt;/h2&gt;&lt;p&gt;​    如果一个模块不是顶层模块，就一般会被其他模块使用，所以需要对模块进行例化为其他上一层模块所
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>FPGA/verilog之程序设计</title>
    <link href="http://yoursite.com/2020/09/01/FPGA/verilog%E4%B9%8B%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    <id>http://yoursite.com/2020/09/01/FPGA/verilog%E4%B9%8B%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</id>
    <published>2020-09-01T06:42:32.139Z</published>
    <updated>2020-09-01T11:03:20.873Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、电路设计的语法"><a href="#一、电路设计的语法" class="headerlink" title="一、电路设计的语法"></a>一、电路设计的语法</h2><h3 id="1、设计不用的语法"><a href="#1、设计不用的语法" class="headerlink" title="1、设计不用的语法"></a>1、设计不用的语法</h3><p>​    a)initial【设计不用，仿真使用】</p><p>​    b)task/function【设计不用，仿真很少使用】</p><p>​    c)for/while/repeat/forever【设计不用，仿真很少使用】</p><p>​    d)integer【设计不用】</p><p>​    e)模块内部不能有X态（不定态）、Z态（高阻态），内部不能有三态接口</p><p>​    f)casex/casez【设计和仿真都不用】</p><p>​    g)forcce/wait/fork【设计不用，仿真很少使用】</p><p>​    h)#5【设计不用，仿真时使用】延时语句</p><h3 id="2、设计使用的语法"><a href="#2、设计使用的语法" class="headerlink" title="2、设计使用的语法"></a>2、设计使用的语法</h3><p>​    a)reg/wire、parameter</p><p>​    b)assign【建议改名时使用】、always</p><p>​    c)只允许使用 if else和case两种条件语句</p><p>​    d)算术运算符（+、-、x、/、%）</p><p>​    e)赋值运算符（=、&lt;=）【时序逻辑用&lt;=，组合逻辑用=；其他情况不存在】</p><p>​    f)关系运算符（&gt;、&lt;、&gt;=、&lt;=）</p><p>​    g)逻辑运算符（&amp;&amp;，||，！）【为避免歧义，逻辑运算符两边必须为1bit信号】</p><p>​    h)位运算符（~、|、^、&amp;）</p><p>​    i)移位运算符（&lt;&lt;、&gt;&gt;）</p><p>​    j)拼接运算符（{}）</p><h2 id="二、电路设计的结构"><a href="#二、电路设计的结构" class="headerlink" title="二、电路设计的结构"></a>二、电路设计的结构</h2><h4 id="1、电路设计的3种结构"><a href="#1、电路设计的3种结构" class="headerlink" title="1、电路设计的3种结构"></a>1、电路设计的3种结构</h4><p>1）组合逻辑</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">verilog</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">always</span>@(*)<span class="keyword">begin</span></span><br><span class="line">语句</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></div><p>2）时序逻辑</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">verilog</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a)同步复位的时序电路</span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk)<span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(rst_n==<span class="number">1'b0</span>)<span class="keyword">begin</span></span><br><span class="line">        语句</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">        语句</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">verilog</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">b)异步复位的时序电路</span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n)<span class="keyword">begin</span></span><br><span class="line">     <span class="keyword">if</span>(rst_n==<span class="number">1'b0</span>)<span class="keyword">begin</span></span><br><span class="line">          语句</span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">          语句</span><br><span class="line">     <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></div><h4 id="2、电路举例"><a href="#2、电路举例" class="headerlink" title="2、电路举例"></a>2、电路举例</h4><p>1)组合逻辑</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">verilog</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">always</span>@(*)<span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">1'b0</span>)</span><br><span class="line">        b=<span class="number">1'b0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        b=<span class="number">1'b1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">verilog</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">always</span>@(*)<span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">case</span>(a)</span><br><span class="line">        <span class="number">1'b0</span>:b=<span class="number">1'b0</span>;</span><br><span class="line">        <span class="number">1'b1</span>:b=<span class="number">1'b1</span>;</span><br><span class="line">        <span class="keyword">default</span>:b=<span class="number">1'b0</span>;</span><br><span class="line">    <span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></div><p>2)时序逻辑–同步复位的时序电路</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">verilog</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk)<span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(rst_n==<span class="number">1'b0</span>)<span class="keyword">begin</span></span><br><span class="line">        b&lt;=<span class="number">1'b0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(a=<span class="number">1'b0</span>)</span><br><span class="line">            b&lt;=<span class="number">1'b0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            b&lt;=<span class="number">1'b1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">verilog</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk)<span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(rst_n==<span class="number">1'b0</span>)<span class="keyword">begin</span></span><br><span class="line">        b&lt;=<span class="number">1'b0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">case</span>(a)</span><br><span class="line">        <span class="number">1'b0</span>:b&lt;=<span class="number">1'b0</span>;</span><br><span class="line">            <span class="number">1'b1</span>:b&lt;=<span class="number">1'b1</span>;</span><br><span class="line">        <span class="keyword">endcase</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></div><p>3）异步复位的时序电路</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">verilog</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n)<span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(rst_n==<span class="number">1'b0</span>)<span class="keyword">begin</span></span><br><span class="line">        b&lt;=<span class="number">1'b0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(a=<span class="number">1'b0</span>)</span><br><span class="line">            b&lt;=<span class="number">1'b0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            b&lt;=<span class="number">1'b1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">verilog</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n)<span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(rst_n==<span class="number">1'b0</span>)<span class="keyword">begin</span></span><br><span class="line">        b&lt;=<span class="number">1'b0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">case</span>(a)</span><br><span class="line">        <span class="number">1'b0</span>:b&lt;=<span class="number">1'b0</span>;</span><br><span class="line">            <span class="number">1'b1</span>:b&lt;=<span class="number">1'b1</span>;</span><br><span class="line">        <span class="keyword">endcase</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></div><h2 id="三、电路设计的要点"><a href="#三、电路设计的要点" class="headerlink" title="三、电路设计的要点"></a>三、电路设计的要点</h2><h4 id="1、一个always只产生一个信号"><a href="#1、一个always只产生一个信号" class="headerlink" title="1、一个always只产生一个信号"></a>1、一个always只产生一个信号</h4><p>如下always中产生了a、b两种信号</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">verilog</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n)<span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(rst_n==<span class="number">1'b0</span>)<span class="keyword">begin</span></span><br><span class="line">        b&lt;=<span class="number">1'b0</span>;</span><br><span class="line">        a&lt;=<span class="number">1'b0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">        b&lt;=<span class="number">1'b1</span>;</span><br><span class="line">        a&lt;=b;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></div><p>进行如下修改</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">verilog</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n)<span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(rst_n==<span class="number">1'b0</span>)<span class="keyword">begin</span></span><br><span class="line">        b&lt;=<span class="number">1'b0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">        b&lt;=<span class="number">1'b1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n)<span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(rst_n==<span class="number">1'b0</span>)<span class="keyword">begin</span></span><br><span class="line">        a&lt;=<span class="number">1'b0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">        a&lt;=b;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></div><h4 id="2、一个信号只能在一个always产生"><a href="#2、一个信号只能在一个always产生" class="headerlink" title="2、一个信号只能在一个always产生"></a>2、一个信号只能在一个always产生</h4><p>（代码块中，b信号在两个always语句中产生，所以修改方式就是删除其中一个always，让b信号在某一个always中完全产生）</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">verilog</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n)<span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(rst_n==<span class="number">1'b0</span>)<span class="keyword">begin</span></span><br><span class="line">        b&lt;=<span class="number">1'b0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(a==<span class="number">1'b1</span>)</span><br><span class="line">        b&lt;=<span class="number">1'b1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n)<span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(rst_n==<span class="number">1'b0</span>)<span class="keyword">begin</span></span><br><span class="line">        a&lt;=<span class="number">1'b0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(c==<span class="number">1'b1</span>)</span><br><span class="line">        b&lt;=<span class="number">1'b0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></div><h4 id="3、always是描述一个信号的产生的方法。即在什么情况下，这个信号的值为多少；在其他情况下，值为多少（要考虑全部情况）"><a href="#3、always是描述一个信号的产生的方法。即在什么情况下，这个信号的值为多少；在其他情况下，值为多少（要考虑全部情况）" class="headerlink" title="3、always是描述一个信号的产生的方法。即在什么情况下，这个信号的值为多少；在其他情况下，值为多少（要考虑全部情况）"></a>3、always是描述一个信号的产生的方法。即在什么情况下，这个信号的值为多少；在其他情况下，值为多少（要考虑全部情况）</h4><p><a href="/../../images/fpga/1598945669004.png" data-fancybox="group" data-caption="1598945669004" class="fancybox"><img alt="1598945669004" data-src="/../../images/fpga/1598945669004.png" class="lazyload" title="1598945669004"></a></p><h4 id="4、条件判断只允许使用if-else和case，其他全部不用（包括casex）"><a href="#4、条件判断只允许使用if-else和case，其他全部不用（包括casex）" class="headerlink" title="4、条件判断只允许使用if else和case，其他全部不用（包括casex）"></a>4、条件判断只允许使用if else和case，其他全部不用（包括casex）</h4><h4 id="5、含有posedeg或negedge的，一定是D触发器，是时序电路"><a href="#5、含有posedeg或negedge的，一定是D触发器，是时序电路" class="headerlink" title="5、含有posedeg或negedge的，一定是D触发器，是时序电路"></a>5、含有posedeg或negedge的，一定是D触发器，是时序电路</h4><h4 id="6、设计时，如果你想立即有结果，那就用组合逻辑；如果你想延时一拍有结果，就使用时序逻辑"><a href="#6、设计时，如果你想立即有结果，那就用组合逻辑；如果你想延时一拍有结果，就使用时序逻辑" class="headerlink" title="6、设计时，如果你想立即有结果，那就用组合逻辑；如果你想延时一拍有结果，就使用时序逻辑"></a>6、设计时，如果你想立即有结果，那就用组合逻辑；如果你想延时一拍有结果，就使用时序逻辑</h4><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>a）三种电路</p><p>b）两种条件</p><p>c）一一法则</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、电路设计的语法&quot;&gt;&lt;a href=&quot;#一、电路设计的语法&quot; class=&quot;headerlink&quot; title=&quot;一、电路设计的语法&quot;&gt;&lt;/a&gt;一、电路设计的语法&lt;/h2&gt;&lt;h3 id=&quot;1、设计不用的语法&quot;&gt;&lt;a href=&quot;#1、设计不用的语法&quot; class
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>位运算相关题型</title>
    <link href="http://yoursite.com/2020/08/31/%E4%BD%8D%E8%BF%90%E7%AE%97%E7%9B%B8%E5%85%B3%E9%A2%98%E5%9E%8B/"/>
    <id>http://yoursite.com/2020/08/31/%E4%BD%8D%E8%BF%90%E7%AE%97%E7%9B%B8%E5%85%B3%E9%A2%98%E5%9E%8B/</id>
    <published>2020-08-31T11:54:39.850Z</published>
    <updated>2020-09-01T12:55:51.443Z</updated>
    
    <content type="html"><![CDATA[<h1 id="位运算相关题型"><a href="#位运算相关题型" class="headerlink" title="位运算相关题型"></a>位运算相关题型</h1><h4 id="136-只出现一次的数字"><a href="#136-只出现一次的数字" class="headerlink" title="136. 只出现一次的数字"></a><a href="https://leetcode-cn.com/problems/single-number/" target="_blank" rel="noopener">136. 只出现一次的数字</a></h4><p>给定一个<strong>非空</strong>整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p><p><strong>说明：</strong></p><p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p><p><strong>示例 1:</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [2,2,1]</span><br><span class="line">输出: 1</span><br></pre></td></tr></table></figure></div><p><strong>示例 2:</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [4,1,2,1,2]</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure></div><p> <strong>解题思路：</strong></p><p>​    异或运算</p><p>规则：</p><table><thead><tr><th align="center">1^1</th><th align="center">0</th></tr></thead><tbody><tr><td align="center">1^0</td><td align="center">1</td></tr><tr><td align="center">0^1</td><td align="center">1</td></tr><tr><td align="center">0^0</td><td align="center">0</td></tr></tbody></table><p>所以规律就是，相同的异或为0，不同的异或为1</p><p>所以相同的数字异或即按位异或(符合交换律和结合律），相同数字每位二进制数都相同，故相同数字异或为0；数字和0异或得到的就是本身，例如（4=100，100^000=100）</p><p>所以一个数组中每两个数字相同，则这两个数字异或就为1，最后把数组中所有的数字进行异或以后，结果就是单独的数字（例如：1,1,2,3,2—&gt;(01^01)^(10^10)^(11)=0^0^(11)=11b=3</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int singleNumber(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        int result&#x3D;0;</span><br><span class="line">        for(int i&#x3D;0;i&lt;nums.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            result&#x3D;result^nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><h4 id="137-只出现一次的数字-II"><a href="#137-只出现一次的数字-II" class="headerlink" title="137. 只出现一次的数字 II"></a><a href="https://leetcode-cn.com/problems/single-number-ii/" target="_blank" rel="noopener">137. 只出现一次的数字 II</a></h4><p>给定一个<strong>非空</strong>整数数组，除了某个元素只出现一次以外，其余每个元素均出现了三次。找出那个只出现了一次的元素。</p><p><strong>说明：</strong></p><p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p><p><strong>示例 1:</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [2,2,3,2]</span><br><span class="line">输出: 3</span><br></pre></td></tr></table></figure></div><p><strong>示例 2:</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [0,1,0,1,0,1,99]</span><br><span class="line">输出: 99</span><br></pre></td></tr></table></figure></div><p><strong>解题思路：</strong></p><p>​    先将每个数字转换为二进制，可以发现，在每一位二进制中，把每个数字的对应位相加，由于，重复的数字3个3个出现，最后这些数字的和一定是3的倍数，故将对应位的和mod3，最后的余数就是目标对应位的bit值，int类型一共是32位，最后得出的32位的二进制就是所求。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">int singleNumber(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        int result&#x3D;0;</span><br><span class="line">        for(int i&#x3D;0;i&lt;&#x3D;31;i++)&#x2F;&#x2F;取出每一位，int类型是32位</span><br><span class="line">        &#123;</span><br><span class="line">            int count&#x3D;0;&#x2F;&#x2F;记录对应bit位的和</span><br><span class="line">            int flag&#x3D;1&lt;&lt;i;</span><br><span class="line">            for(int j&#x3D;0;j&lt;nums.size();j++)</span><br><span class="line">            &#123;</span><br><span class="line">                if(nums[j]&amp;flag)</span><br><span class="line">                &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if(count%3!&#x3D;0)</span><br><span class="line">            &#123;</span><br><span class="line">                result&#x3D;result|flag;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><h4 id="260-只出现一次的数字-III"><a href="#260-只出现一次的数字-III" class="headerlink" title="260. 只出现一次的数字 III"></a><a href="https://leetcode-cn.com/problems/single-number-iii/" target="_blank" rel="noopener">260. 只出现一次的数字 III</a></h4><p>给定一个整数数组 <code>nums</code>，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。</p><p><strong>示例 :</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,2,1,3,2,5]</span><br><span class="line">输出: [3,5]</span><br></pre></td></tr></table></figure></div><p><strong>注意：</strong></p><ol><li>结果输出的顺序并不重要，对于上面的例子， <code>[5, 3]</code> 也是正确答案。</li><li>你的算法应该具有线性时间复杂度。你能否仅使用常数空间复杂度来实现？</li></ol><p><strong>解题思路：</strong></p><p>​    可以依照第一题的方式，想办法将两个不同的数转化到两组，之后两组异或的结果即为所求，如何保证两个不同的数字分别在两个不同的组呢？首先肯定的一点就是，不同的数字安慰异或时，总有某位是不为0的，如果都是0则这两个数相同，所以可以根据将所有数字进行异或后，找到第一位不是0的数字进行分类，把该位是0的分到一类，把该位是1的分到一类，这样就可以保证两个数字不在同一组。</p><p>例如：</p><p>nums=[2,2,3,3,4,5]</p><p>2^2^3^3^4^5=001b,第一位不为0的就是第0位</p><table><thead><tr><th align="center">2</th><th align="center">010</th><th align="center">第一组</th></tr></thead><tbody><tr><td align="center">2</td><td align="center">010</td><td align="center">第一组</td></tr><tr><td align="center">3</td><td align="center">011</td><td align="center">第二组</td></tr><tr><td align="center">3</td><td align="center">011</td><td align="center">第二组</td></tr><tr><td align="center">4</td><td align="center">100</td><td align="center">第一组</td></tr><tr><td align="center">5</td><td align="center">101</td><td align="center">第二组</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;int&gt; singleNumber(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        &#x2F;&#x2F;找到第一个不为0的bit位</span><br><span class="line">        &#x2F;&#x2F;求出异或结果</span><br><span class="line">        int result&#x3D;0;</span><br><span class="line">        for(int i&#x3D;0;i&lt;nums.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            result&#x3D;result^nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        int flag&#x3D;1;</span><br><span class="line">        for(int i&#x3D;0;i&lt;&#x3D;31;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;对result的每一位进行与运算，取出该位</span><br><span class="line">            flag&#x3D;1&lt;&lt;i;</span><br><span class="line">            if((result&amp;flag)!&#x3D;0)&#x2F;&#x2F;第一位不为0的下标是i</span><br><span class="line">            &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;进行分组，a，b两组</span><br><span class="line">        vector&lt;int&gt; res;</span><br><span class="line">        res.push_back(0);</span><br><span class="line">        res.push_back(0);</span><br><span class="line">        for(int i&#x3D;0;i&lt;nums.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if((nums[i]&amp;flag)&#x3D;&#x3D;flag)</span><br><span class="line">            &#123;</span><br><span class="line">                res[0]&#x3D;res[0]^nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                res[1]&#x3D;res[1]^nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;位运算相关题型&quot;&gt;&lt;a href=&quot;#位运算相关题型&quot; class=&quot;headerlink&quot; title=&quot;位运算相关题型&quot;&gt;&lt;/a&gt;位运算相关题型&lt;/h1&gt;&lt;h4 id=&quot;136-只出现一次的数字&quot;&gt;&lt;a href=&quot;#136-只出现一次的数字&quot; class=&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>阅读笔记</title>
    <link href="http://yoursite.com/2020/08/14/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/08/14/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</id>
    <published>2020-08-14T11:11:53.423Z</published>
    <updated>2020-08-14T15:03:03.525Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Deep-Video-Super-Resolution-Network-Using-Dynamic-Upsampling-Filters-Without-Explicit-Motion-Compensation"><a href="#Deep-Video-Super-Resolution-Network-Using-Dynamic-Upsampling-Filters-Without-Explicit-Motion-Compensation" class="headerlink" title="Deep Video Super-Resolution Network Using Dynamic Upsampling Filters Without Explicit Motion Compensation"></a>Deep Video Super-Resolution Network Using Dynamic Upsampling Filters Without Explicit Motion Compensation</h1><p>算法改进的提出</p><p>基于深度学习的单图像超分辨率（SISR）方法在峰值信噪比（PSNR）和结构相似性指数（SSIM）上展示了state-of-art的性能。</p><p>执行VSR的一种简单方法是逐帧运行SISR。然而，由于SISR方法没有考虑帧之间的时间关系，因此很可能连续帧没有自然连接，从而导致闪烁伪影。</p><p>传统的VSR（或多图像超分辨率）算法通过考虑相邻LR帧之间的亚像素运动，将多个LR帧作为输入和输出HR帧。所有基于深度学习的VSR方法都遵循相似的步骤，由两个步骤组成：运动估计和补偿过程，然后是上采样过程。这种两步法的一个问题是，结果严重依赖于精确的运动估计。这种方法的另一个潜在问题是，HR输出帧是通过卷积神经网络（CNN）将多个运动补偿输入LR帧的值混合而产生的，这可能导致HR帧的输出模糊。</p><p>本文提出了一种新的端到端深度神经网络，它与以往的方法有着根本的不同。而不是显式地计算和补偿输入帧之间的运动，而是隐式地利用运动信息生成动态上采样滤波器。利用生成的上采样滤波器，HR帧直接通过对输入中心帧的局部滤波来构造。由于我们不依赖于运动的显式计算，也不直接合并来自多个帧的值，所以我们可以生成更清晰和时间一致的HR视频。通过大量的训练视频和新的数据扩充过程，我们实现了与以前基于深度学习的VSR算法相比的最新性能。图1示出了一个例子，其中与最先进的方法之一VSRnet[16]相比，我们的方法产生的帧更清晰，闪烁更少。</p><p>基于非深度学习的传统VSR方法通过将HR帧之间的运动、模糊过程和子采样放在一个框架中来模拟VSR问题，并重点使用优化方法解决尖锐帧。</p><p>以往基于CNN的端到端VSR方法主要集中在显式运动估计和补偿上，以更好地重建HR帧。与以往的工作不同，我们没有明确的运动估计和补偿步骤。利用自适应上采样和动态滤波器依赖于输入帧，我们获得了一个超越现有工作的VSR性能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Deep-Video-Super-Resolution-Network-Using-Dynamic-Upsampling-Filters-Without-Explicit-Motion-Compensation&quot;&gt;&lt;a href=&quot;#Deep-Video-Supe
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据结构和算法</title>
    <link href="http://yoursite.com/2020/07/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2020/07/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/</id>
    <published>2020-07-11T13:47:42.095Z</published>
    <updated>2020-07-11T14:24:16.605Z</updated>
    
    <content type="html"><![CDATA[<p>什么是数据结构？</p><p>在计算机中存储和组织数据的方式</p><p>什么是算法？（解决问题的办法）</p><p>1、一个有限指令集，每条指令的描述不依赖于语言</p><p>2、接受一些输入（有些情况不需要输入）</p><p>3、产生输出</p><p>4、在有限步后终止</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;什么是数据结构？&lt;/p&gt;
&lt;p&gt;在计算机中存储和组织数据的方式&lt;/p&gt;
&lt;p&gt;什么是算法？（解决问题的办法）&lt;/p&gt;
&lt;p&gt;1、一个有限指令集，每条指令的描述不依赖于语言&lt;/p&gt;
&lt;p&gt;2、接受一些输入（有些情况不需要输入）&lt;/p&gt;
&lt;p&gt;3、产生输出&lt;/p&gt;
&lt;p&gt;4、在
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>论文阅读笔记(一)</title>
    <link href="http://yoursite.com/2020/07/08/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0(%E4%B8%80)/"/>
    <id>http://yoursite.com/2020/07/08/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0(%E4%B8%80)/</id>
    <published>2020-07-08T13:29:59.894Z</published>
    <updated>2020-07-08T16:16:19.149Z</updated>
    
    <content type="html"><![CDATA[<h1 id="You’ll-Never-Walk-Alone-Modeling-Social-Behavior-for-Multi-target-Tracking"><a href="#You’ll-Never-Walk-Alone-Modeling-Social-Behavior-for-Multi-target-Tracking" class="headerlink" title="You’ll Never Walk Alone: Modeling Social   Behavior for Multi-target Tracking"></a>You’ll Never Walk Alone: Modeling Social   Behavior for Multi-target Tracking</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;You’ll-Never-Walk-Alone-Modeling-Social-Behavior-for-Multi-target-Tracking&quot;&gt;&lt;a href=&quot;#You’ll-Never-Walk-Alone-Modeling-Social-Behavi
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>入门flask框架</title>
    <link href="http://yoursite.com/2020/06/18/%E5%85%A5%E9%97%A8flask%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2020/06/18/%E5%85%A5%E9%97%A8flask%E6%A1%86%E6%9E%B6/</id>
    <published>2020-06-18T02:46:41.250Z</published>
    <updated>2020-06-18T08:01:09.708Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、flask安装"><a href="#一、flask安装" class="headerlink" title="一、flask安装"></a>一、flask安装</h2><p>（本文是在已近安装python38以及prcharm的基础上进行的框架安装）</p><h3 id="1、虚拟环境创建的必要性"><a href="#1、虚拟环境创建的必要性" class="headerlink" title="1、虚拟环境创建的必要性"></a>1、虚拟环境创建的必要性</h3><p><strong>关于virtualenv：</strong></p><p>​    VirtualEnv用于在一台机器上创建多个独立的Python虚拟运行环境，多个Python环境相互独立，互不影响，它能够：</p><p>1、在没有权限的情况下安装新套件<br>2、不同应用可以使用不同的套件版本<br>3、套件升级不影响其他应用<br>    虚拟环境是在Python解释器上的一个私有复制，你可以在一个隔绝的环境下安装packages，不会影响到你系统中全局的Python解释器。</p><p>​    虚拟环境非常有用，因为它可以防止系统出现包管理混乱和版本冲突的问题。为每个应用程序创建一个虚拟环境可以确保应用程序只能访问它们自己使用的包，从而全局解释器只作为一个源且依然整洁干净去更多的虚拟环境。另一个好处是，虚拟环境不需要管理员权限。</p><h3 id="2、vitualenv安装"><a href="#2、vitualenv安装" class="headerlink" title="2、vitualenv安装"></a>2、vitualenv安装</h3><p>由于python从3.4版本开始就自带pip，故不需要对pip进行安装，可直接使用，首先切换到python安装目录Scripts下安装</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd D:\Python\Python38\Scripts</span><br><span class="line">d:</span><br><span class="line">pip install virtualenv</span><br></pre></td></tr></table></figure></div><p>安装成功如图所示，在Scrips下课找到virtualenv</p><p><a href="/../images/%E5%85%A5%E9%97%A8flask%E6%A1%86%E6%9E%B6/1.png" data-fancybox="group" data-caption="1592451406929" class="fancybox"><img alt="1592451406929" data-src="/../images/%E5%85%A5%E9%97%A8flask%E6%A1%86%E6%9E%B6/1.png" class="lazyload" title="1592451406929"></a></p><h3 id="3、自定义安装路径创建虚拟环境"><a href="#3、自定义安装路径创建虚拟环境" class="headerlink" title="3、自定义安装路径创建虚拟环境"></a>3、自定义安装路径创建虚拟环境</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d:&gt;python -m venv myenv</span><br></pre></td></tr></table></figure></div><p>myenv为自定义虚拟环境名</p><h3 id="4、flask安装"><a href="#4、flask安装" class="headerlink" title="4、flask安装"></a>4、flask安装</h3><p>进入到D:\virtualenv\myenv\Scripts路径下，执行activate.bat进入虚拟环境</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">activate.bat</span><br></pre></td></tr></table></figure></div><p>出现如下所示标识符</p><p><a href="/../images/%E5%85%A5%E9%97%A8flask%E6%A1%86%E6%9E%B6/2.png" data-fancybox="group" data-caption="1592451738957" class="fancybox"><img alt="1592451738957" data-src="/../images/%E5%85%A5%E9%97%A8flask%E6%A1%86%E6%9E%B6/2.png" class="lazyload" title="1592451738957"></a></p><p>用pip命令安装flask框架</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask</span><br></pre></td></tr></table></figure></div><p><a href="/../images/%E5%85%A5%E9%97%A8flask%E6%A1%86%E6%9E%B6/3.png" data-fancybox="group" data-caption="1592451825839" class="fancybox"><img alt="1592451825839" data-src="/../images/%E5%85%A5%E9%97%A8flask%E6%A1%86%E6%9E%B6/3.png" class="lazyload" title="1592451825839"></a></p><p>安装成功！</p><h4 id="！！！注意，重点来了"><a href="#！！！注意，重点来了" class="headerlink" title="！！！注意，重点来了"></a><strong>！！！注意，重点来了</strong></h4><p>我的上篇文章讲的pycharm项目创建时其实默认把虚拟环境也创建进来了，也就是没新建一个目录都会默认新建一个虚拟环境，和project在同一个文件夹下面名为venv，接下来将讲述如何导入自己创建的虚拟环境。</p><h3 id="6、新建项目"><a href="#6、新建项目" class="headerlink" title="6、新建项目"></a>6、新建项目</h3><p><a href="/../images/%E5%85%A5%E9%97%A8flask%E6%A1%86%E6%9E%B6/4.png" data-fancybox="group" data-caption="1592462591424" class="fancybox"><img alt="1592462591424" data-src="/../images/%E5%85%A5%E9%97%A8flask%E6%A1%86%E6%9E%B6/4.png" class="lazyload" title="1592462591424"></a></p><p>之后点击creat项目新建完成</p><h3 id="7、修改项目的interpreter（即添加虚拟环境中的解释器）"><a href="#7、修改项目的interpreter（即添加虚拟环境中的解释器）" class="headerlink" title="7、修改项目的interpreter（即添加虚拟环境中的解释器）"></a>7、修改项目的interpreter（即添加虚拟环境中的解释器）</h3><p><a href="/../images/%E5%85%A5%E9%97%A8flask%E6%A1%86%E6%9E%B6/5.png" data-fancybox="group" data-caption="1592462731884" class="fancybox"><img alt="1592462731884" data-src="/../images/%E5%85%A5%E9%97%A8flask%E6%A1%86%E6%9E%B6/5.png" class="lazyload" title="1592462731884"></a></p><p><a href="/../images/%E5%85%A5%E9%97%A8flask%E6%A1%86%E6%9E%B6/6.png" data-fancybox="group" data-caption="1592462784472" class="fancybox"><img alt="1592462784472" data-src="/../images/%E5%85%A5%E9%97%A8flask%E6%A1%86%E6%9E%B6/6.png" class="lazyload" title="1592462784472"></a></p><p><a href="/../images/%E5%85%A5%E9%97%A8flask%E6%A1%86%E6%9E%B6/7.png" data-fancybox="group" data-caption="1592462826874" class="fancybox"><img alt="1592462826874" data-src="/../images/%E5%85%A5%E9%97%A8flask%E6%A1%86%E6%9E%B6/7.png" class="lazyload" title="1592462826874"></a></p><p>选择解释器所在处，注意是添加新建的虚拟环境中的解释器</p><p>如图所示我的虚拟环境的路径为D:\virtualenv\myenv\Scripts\python.exe，添加解释器python.exe</p><p><a href="/../images/%E5%85%A5%E9%97%A8flask%E6%A1%86%E6%9E%B6/8.png" data-fancybox="group" data-caption="1592462941457" class="fancybox"><img alt="1592462941457" data-src="/../images/%E5%85%A5%E9%97%A8flask%E6%A1%86%E6%9E%B6/8.png" class="lazyload" title="1592462941457"></a></p><p>回到settings界面，其中出现一些包，包含flask，即表示添加成功</p><h2 id="二、requirements文件使用"><a href="#二、requirements文件使用" class="headerlink" title="二、requirements文件使用"></a>二、requirements文件使用</h2><h3 id="1、使用目的"><a href="#1、使用目的" class="headerlink" title="1、使用目的"></a>1、使用目的</h3><p>​    python项目中包含requirements.txt文件，用于记录所有依赖包及其精确的版本号，以便在新环境中进行部署操作。由于我也没有很多包，所以只是进行示范性操作，如有需要可以找其他人要一下导入包的名称版本号的txt文件。</p><h3 id="2、requirements文件创建"><a href="#2、requirements文件创建" class="headerlink" title="2、requirements文件创建"></a>2、requirements文件创建</h3><p>点击项目页面下方的terminal</p><p><a href="/../images/%E5%85%A5%E9%97%A8flask%E6%A1%86%E6%9E%B6/9.png" data-fancybox="group" data-caption="1592465346240" class="fancybox"><img alt="1592465346240" data-src="/../images/%E5%85%A5%E9%97%A8flask%E6%A1%86%E6%9E%B6/9.png" class="lazyload" title="1592465346240"></a></p><h3 id="3、导出此虚拟环境下包含的包名称到txt文件中"><a href="#3、导出此虚拟环境下包含的包名称到txt文件中" class="headerlink" title="3、导出此虚拟环境下包含的包名称到txt文件中"></a>3、导出此虚拟环境下包含的包名称到txt文件中</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(myenv) E:\PycharmProjects\ebay&gt;pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure></div><p>在项目文件夹下若出现requirements.txt文件表明导出成功，文件信息如图所示</p><p><a href="/../images/%E5%85%A5%E9%97%A8flask%E6%A1%86%E6%9E%B6/10.png" data-fancybox="group" data-caption="1592465521127" class="fancybox"><img alt="1592465521127" data-src="/../images/%E5%85%A5%E9%97%A8flask%E6%A1%86%E6%9E%B6/10.png" class="lazyload" title="1592465521127"></a></p><p><a href="/../images/%E5%85%A5%E9%97%A8flask%E6%A1%86%E6%9E%B6/11.png" data-fancybox="group" data-caption="1592465562253" class="fancybox"><img alt="1592465562253" data-src="/../images/%E5%85%A5%E9%97%A8flask%E6%A1%86%E6%9E%B6/11.png" class="lazyload" title="1592465562253"></a></p><h3 id="4、requirements文件导入方法"><a href="#4、requirements文件导入方法" class="headerlink" title="4、requirements文件导入方法"></a>4、requirements文件导入方法</h3><p>将requirements.txt文件放入所要导入项目的文件夹中</p><p><a href="/../images/%E5%85%A5%E9%97%A8flask%E6%A1%86%E6%9E%B6/12.png" data-fancybox="group" data-caption="1592466160876" class="fancybox"><img alt="1592466160876" data-src="/../images/%E5%85%A5%E9%97%A8flask%E6%A1%86%E6%9E%B6/12.png" class="lazyload" title="1592466160876"></a></p><p>在terminal中输入</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></div><p>之后会按照文件中的顺序遍历然后依次安装。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、flask安装&quot;&gt;&lt;a href=&quot;#一、flask安装&quot; class=&quot;headerlink&quot; title=&quot;一、flask安装&quot;&gt;&lt;/a&gt;一、flask安装&lt;/h2&gt;&lt;p&gt;（本文是在已近安装python38以及prcharm的基础上进行的框架安装）&lt;/p&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Python安装以及pycharm的安装</title>
    <link href="http://yoursite.com/2020/06/06/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2020/06/06/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/</id>
    <published>2020-06-06T05:47:01.350Z</published>
    <updated>2020-06-19T07:58:18.052Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Python3-8安装"><a href="#一、Python3-8安装" class="headerlink" title="一、Python3.8安装"></a>一、Python3.8安装</h2><h3 id="1、下载Python安装包【下载地址】"><a href="#1、下载Python安装包【下载地址】" class="headerlink" title="1、下载Python安装包【下载地址】"></a>1、下载Python安装包【<a href="https://www.python.org/downloads/release/python-374/" target="_blank" rel="noopener">下载地址</a>】</h3><p>选择Downloads–&gt;Windows</p><p><a href="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/1.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" data-src="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/1.png" class="lazyload" title="img"></a></p><p>选择<a href="https://www.python.org/ftp/python/3.8.3/python-3.8.3-amd64-webinstall.exe" target="_blank" rel="noopener">Windows x86-64 web-based installer</a> 版本</p><p><a href="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/2.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" data-src="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/2.png" class="lazyload" title="img"></a></p><h3 id="2、安装python3-8-3"><a href="#2、安装python3-8-3" class="headerlink" title="2、安装python3.8.3"></a>2、安装python3.8.3</h3><p>​    双击exe文件进行安装，选择自定义安装，其他选择不变，更改安装路径即可，勾线Add Python 3.8 to PATH，否自后面需要自行添加路径</p><p><a href="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/3.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" data-src="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/3.png" class="lazyload" title="img"></a></p><p><a href="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/4.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" data-src="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/4.png" class="lazyload" title="img"></a></p><h3 id="3、验证是否安装成功"><a href="#3、验证是否安装成功" class="headerlink" title="3、验证是否安装成功"></a>3、验证是否安装成功</h3><p>在cmd中输入python，若出现版本号等信息则表示安装成功，如图所示</p><p><a href="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/5.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" data-src="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/5.png" class="lazyload" title="img"></a></p><h2 id="二、pycharm-社区版）的安装"><a href="#二、pycharm-社区版）的安装" class="headerlink" title="二、pycharm(社区版）的安装"></a>二、pycharm(社区版）的安装</h2><h3 id="1、下载pycharm【下载地址】"><a href="#1、下载pycharm【下载地址】" class="headerlink" title="1、下载pycharm【下载地址】"></a>1、下载pycharm【<a href="https://www.jetbrains.com/pycharm/download/#section=windows" target="_blank" rel="noopener">下载地址</a>】</h3><p>（此处是下载的社区版，因为免费）</p><p><a href="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/6.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" data-src="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/6.png" class="lazyload" title="img"></a></p><h3 id="2、pycharm的安装"><a href="#2、pycharm的安装" class="headerlink" title="2、pycharm的安装"></a>2、pycharm的安装</h3><p><a href="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/7.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" data-src="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/7.png" class="lazyload" title="img"></a></p><p><a href="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/8.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" data-src="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/8.png" class="lazyload" title="img"></a></p><h3 id="3、pycharm基本配置"><a href="#3、pycharm基本配置" class="headerlink" title="3、pycharm基本配置"></a>3、pycharm基本配置</h3><p>根据喜好设置颜色，之后点击下一步</p><p><a href="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/9.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" data-src="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/9.png" class="lazyload" title="img"></a></p><p>之后点击右下方按钮（start using pycharm）即可</p><p>新建项目</p><p><a href="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/10.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" data-src="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/10.png" class="lazyload" title="img"></a></p><p>修改保存路径</p><p><a href="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/11.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" data-src="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/11.png" class="lazyload" title="img"></a></p><p>新建py文件project1右键选择new–&gt;python file</p><p><a href="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/12.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" data-src="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/12.png" class="lazyload" title="img"></a></p><p>输入文件名即可</p><p><a href="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/13.png" data-fancybox="group" data-caption="1591340807310" class="fancybox"><img alt="1591340807310" data-src="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/13.png" class="lazyload" title="1591340807310"></a></p><p><a href="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/14.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" data-src="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/14.png" class="lazyload" title="img"></a></p><p>写好代码点击run运行即可</p><p><a href="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/15.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" data-src="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/15.png" class="lazyload" title="img"></a></p><h3 id="4、字体大小设置"><a href="#4、字体大小设置" class="headerlink" title="4、字体大小设置"></a>4、字体大小设置</h3><p>file–&gt;settings–&gt;Editor–&gt;Font</p><p><a href="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/16.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" data-src="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/16.png" class="lazyload" title="img"></a></p><p><a href="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/17.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" data-src="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/17.png" class="lazyload" title="img"></a></p><p>根据自己的喜好设置字体以及字体大小，点击apply–&gt;ok即可</p><h2 id="三、pycharm-专业版）的安装与破解"><a href="#三、pycharm-专业版）的安装与破解" class="headerlink" title="三、pycharm(专业版）的安装与破解"></a>三、pycharm(专业版）的安装与破解</h2><h3 id="1、pycharm的下载【下载地址】"><a href="#1、pycharm的下载【下载地址】" class="headerlink" title="1、pycharm的下载【下载地址】"></a>1、pycharm的下载【<a href="https://www.jetbrains.com/pycharm/download/#section=windows" target="_blank" rel="noopener">下载地址</a>】</h3><p>进入网站选择professional版本点击Downloade</p><p><a href="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/18.png" data-fancybox="group" data-caption="1592538123633" class="fancybox"><img alt="1592538123633" data-src="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/18.png" class="lazyload" title="1592538123633"></a></p><p>下载完成后会在电脑中出现入下所示.exe文件</p><p><a href="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/19.png" data-fancybox="group" data-caption="1592538674566" class="fancybox"><img alt="1592538674566" data-src="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/19.png" class="lazyload" title="1592538674566"></a></p><h3 id="2、pycharm的安装-1"><a href="#2、pycharm的安装-1" class="headerlink" title="2、pycharm的安装"></a>2、pycharm的安装</h3><p>双击下载好的的.exe文件进去安装界面</p><p><a href="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/20.png" data-fancybox="group" data-caption="1592538790709" class="fancybox"><img alt="1592538790709" data-src="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/20.png" class="lazyload" title="1592538790709"></a></p><p><a href="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/21.png" data-fancybox="group" data-caption="1592538859947" class="fancybox"><img alt="1592538859947" data-src="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/21.png" class="lazyload" title="1592538859947"></a></p><p>勾选左侧三个选项即可</p><p><a href="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/22.png" data-fancybox="group" data-caption="1592539042025" class="fancybox"><img alt="1592539042025" data-src="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/22.png" class="lazyload" title="1592539042025"></a></p><p><a href="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/23.png" data-fancybox="group" data-caption="1592539075865" class="fancybox"><img alt="1592539075865" data-src="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/23.png" class="lazyload" title="1592539075865"></a></p><p>点击install后安装开始</p><p><a href="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/24.png" data-fancybox="group" data-caption="1592539179915" class="fancybox"><img alt="1592539179915" data-src="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/24.png" class="lazyload" title="1592539179915"></a></p><p>数分钟的等待结束后不要马上打开，直接点击finish完成安装即可</p><p><a href="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/25.png" data-fancybox="group" data-caption="1592539250505" class="fancybox"><img alt="1592539250505" data-src="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/25.png" class="lazyload" title="1592539250505"></a></p><h3 id="3、pycharm的激活"><a href="#3、pycharm的激活" class="headerlink" title="3、pycharm的激活"></a>3、pycharm的激活</h3><p>双击桌面的快捷方式打开pycharm</p><p><a href="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/26.png" data-fancybox="group" data-caption="1592539338022" class="fancybox"><img alt="1592539338022" data-src="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/26.png" class="lazyload" title="1592539338022"></a></p><p><a href="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/27.png" data-fancybox="group" data-caption="1592539419351" class="fancybox"><img alt="1592539419351" data-src="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/27.png" class="lazyload" title="1592539419351"></a></p><p>选择直接喜欢的界面风格即可，此处我选择的是light</p><p><a href="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/28.png" data-fancybox="group" data-caption="1592539604173" class="fancybox"><img alt="1592539604173" data-src="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/28.png" class="lazyload" title="1592539604173"></a></p><p>此处是对于插件的选择安装，我没有这些插件的需求，故直接start using pycharm</p><p><a href="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/29.png" data-fancybox="group" data-caption="1592539689479" class="fancybox"><img alt="1592539689479" data-src="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/29.png" class="lazyload" title="1592539689479"></a></p><h4 id="3-1-激活码激活"><a href="#3-1-激活码激活" class="headerlink" title="3.1 激活码激活"></a>3.1 激活码激活</h4><p>（注意：该方式差不多一年需要找新的激活码进行激活）</p><p><a href="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/30.png" data-fancybox="group" data-caption="1592540174652" class="fancybox"><img alt="1592540174652" data-src="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/30.png" class="lazyload" title="1592540174652"></a></p><p>提供几个获取激活码的公众号</p><p>【<a href="http://lookdiv.com/" target="_blank" rel="noopener">链接1</a>】【<a href="http://idea.medeming.com/jets/" target="_blank" rel="noopener">链接2</a>】</p><h4 id="3-2-永久激活-我激活失败了"><a href="#3-2-永久激活-我激活失败了" class="headerlink" title="3.2 永久激活(我激活失败了)"></a>3.2 永久激活(我激活失败了)</h4><p>（1）下载压缩包 jetbrains-agent-latest.zip 【<a href="https://mp.weixin.qq.com/s?__biz=MzU5NjY5Nzg3Mw==&mid=100001543&idx=1&sn=815a50399838d3563c0cb78cec56a8bb&chksm=7e5ff1794928786fa611f96e852ef583e7748d51b843759a4a2b5ccf1a9f7742618dc0d75443#rd" target="_blank" rel="noopener">参考链接</a>】</p><p>（2）启动IDE，如果需要注册，选择：试用（Evaluate for free）进入IDE </p><p><a href="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/31.png" data-fancybox="group" data-caption="1592550661116" class="fancybox"><img alt="1592550661116" data-src="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/31.png" class="lazyload" title="1592550661116"></a></p><p>（2）直接将jetbrains-agent-latest.zip拖入pycharm界面中即可，之后弹出IDE and Plugin Updates窗口，点击<strong>restart</strong>进行重启：</p><p><a href="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/32.png" data-fancybox="group" data-caption="1592551172587" class="fancybox"><img alt="1592551172587" data-src="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/32.png" class="lazyload" title="1592551172587"></a></p><p>（3）配置助手提示所需采用的激活方式，选择默认Activation Code</p><p><a href="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/33.png" data-fancybox="group" data-caption="1592551234397" class="fancybox"><img alt="1592551234397" data-src="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/33.png" class="lazyload" title="1592551234397"></a></p><p>（4）重启在help-&gt;register中进行激活，之后步骤同上述激活码激活方式一样</p><p><a href="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/35.png" data-fancybox="group" data-caption="1592552972150" class="fancybox"><img alt="1592552972150" data-src="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/35.png" class="lazyload" title="1592552972150"></a></p><p>参考永久激活链接【<a href="https://mp.weixin.qq.com/s/ayIzGQoIm_UCe-e0LdFhmw" target="_blank" rel="noopener">链接1</a>】【<a href="https://mp.weixin.qq.com/s?__biz=MzU5NjY5Nzg3Mw==&mid=100001543&idx=1&sn=815a50399838d3563c0cb78cec56a8bb&chksm=7e5ff1794928786fa611f96e852ef583e7748d51b843759a4a2b5ccf1a9f7742618dc0d75443#rd" target="_blank" rel="noopener">链接2</a>】</p><h4 id="4、新建项目（flask项目）"><a href="#4、新建项目（flask项目）" class="headerlink" title="4、新建项目（flask项目）"></a>4、新建项目（flask项目）</h4><p>（1）file-&gt;new project，选择flask，记得把倒三角形点开，否则会自动创建新的虚拟环境</p><p><a href="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/36.png" data-fancybox="group" data-caption="1592553260382" class="fancybox"><img alt="1592553260382" data-src="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/36.png" class="lazyload" title="1592553260382"></a></p><p>（2）选择已有的解释器，即已经创建的虚拟环境，如有创建虚拟环境需要请参考【<a href="https://luckyjyu.github.io/2020/06/06/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/" target="_blank" rel="noopener">参考链接</a>】</p><p><a href="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/34.png" data-fancybox="group" data-caption="1592552657323" class="fancybox"><img alt="1592552657323" data-src="/../images/Python%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Apycharm%E7%9A%84%E5%AE%89%E8%A3%85/34.png" class="lazyload" title="1592552657323"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、Python3-8安装&quot;&gt;&lt;a href=&quot;#一、Python3-8安装&quot; class=&quot;headerlink&quot; title=&quot;一、Python3.8安装&quot;&gt;&lt;/a&gt;一、Python3.8安装&lt;/h2&gt;&lt;h3 id=&quot;1、下载Python安装包【下载地址】&quot;&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>基于hexo的博客搭建</title>
    <link href="http://yoursite.com/2020/06/01/%E5%9F%BA%E4%BA%8Ehexo%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2020/06/01/%E5%9F%BA%E4%BA%8Ehexo%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</id>
    <published>2020-06-01T02:51:42.271Z</published>
    <updated>2020-06-01T15:09:56.150Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、下载nodejs并安装"><a href="#1、下载nodejs并安装" class="headerlink" title="1、下载nodejs并安装"></a>1、下载nodejs并安装</h2><p>下载地址：<a href="nodejs.org">nodejs.org</a></p><p>会出现两个文件夹，一个是nodejs本身一个是npm（包管理器）</p><h3 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h3><p>用管理员身份运行cmd</p><p>可查看node版本：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure></div><p>包管理器版本：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure></div><h3 id="1-2"><a href="#1-2" class="headerlink" title="1.2"></a>1.2</h3><p>为提高速度，切换淘宝镜像源，npm太慢</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;http:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure></div><p><a href="/../images/%E5%9F%BA%E4%BA%8Ehexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/1.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" data-src="/../images/%E5%9F%BA%E4%BA%8Ehexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/1.png" class="lazyload" title="img"></a></p><p>如上即安装成功</p><h3 id="1-3-安装hexo框架"><a href="#1-3-安装hexo框架" class="headerlink" title="1.3 安装hexo框架"></a>1.3 安装hexo框架</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure></div><p>用hexo -v进行验证</p><p>在进行框架搭建前需要安装git【<a href="https://blog.csdn.net/weixin_44198965/article/details/99686507?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase" target="_blank" rel="noopener">参考链接</a>】快速安装方法，访问国外网站安装太慢了</p><p>在cmd中切换好安装路径后输入：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure></div><p>查看是否成功</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure></div><p><strong>ctrl+c</strong>断开，可在<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>进行查看</p><h3 id="1-4-创建新文章："><a href="#1-4-创建新文章：" class="headerlink" title="1.4 创建新文章："></a>1.4 创建新文章：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;我的第一篇博客“</span><br></pre></td></tr></table></figure></div><p>在blog/sourese/_posts下可以查看到.md文章（推荐使用Typora进行博客编写）</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean清理一下</span><br><span class="line"></span><br><span class="line">hexo generate相当于将新文章上传</span><br><span class="line"></span><br><span class="line">hexo s进行查看</span><br></pre></td></tr></table></figure></div><h2 id="2、将博客部署到GitHub服务器"><a href="#2、将博客部署到GitHub服务器" class="headerlink" title="2、将博客部署到GitHub服务器"></a>2、将博客部署到GitHub服务器</h2><p>注意：GitHub的账户名称不能有大写字母</p><h3 id="2-1-新建仓库"><a href="#2-1-新建仓库" class="headerlink" title="2.1 新建仓库"></a>2.1 新建仓库</h3><p>登录GitHub，点击左上角加号中的新建仓库（new repository)，如图所示</p><p><a href="/../images/%E5%9F%BA%E4%BA%8Ehexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/2.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" data-src="/../images/%E5%9F%BA%E4%BA%8Ehexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/2.png" class="lazyload" title="img"></a></p><p>在cmd环境下安装插件：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure></div><h3 id="2-2-修改-config文件"><a href="#2-2-修改-config文件" class="headerlink" title="2.2 修改_config文件"></a>2.2 修改_config文件</h3><p>设置blog/_config文件（在尾部修改）</p><p>如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">type:‘ git’（有单引号）</span><br><span class="line"></span><br><span class="line">repo: https:&#x2F;&#x2F;github.com&#x2F;luckyjyu&#x2F;luckyjyu.github.io</span><br><span class="line"></span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure></div><p><a href="/../images/%E5%9F%BA%E4%BA%8Ehexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/3.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" data-src="/../images/%E5%9F%BA%E4%BA%8Ehexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/3.png" class="lazyload" title="img"></a></p><h3 id="2-3-配置git的用户名和邮箱"><a href="#2-3-配置git的用户名和邮箱" class="headerlink" title="2.3 配置git的用户名和邮箱"></a>2.3 配置git的用户名和邮箱</h3><p>鼠标右击打开git bash命令行输入：</p><p>git config –global user.name “luckyjyu”</p><p>git config –global user.email “<a href="mailto:865618315@qq.com">865618315@qq.com</a>“</p><p>在cmd命令行输入：hexo d    部署文件到远端</p><p>现在成功了！可以通过<a href="https://github.com/luckyjyu/luckyjyu.github.io" target="_blank" rel="noopener">luckyjyu.github.io</a>来访问博客</p><h2 id="3、自定义主题切换"><a href="#3、自定义主题切换" class="headerlink" title="3、自定义主题切换"></a>3、自定义主题切换</h2><h3 id="3-1-yilia主题切换"><a href="#3-1-yilia主题切换" class="headerlink" title="3.1 yilia主题切换"></a>3.1 yilia主题切换</h3><p>下载主题到themes/yilia文件下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;litten&#x2F;hexo-theme-yilia.git themes&#x2F;yilia</span><br></pre></td></tr></table></figure></div><p>主题应用（修改blog/_config文件）</p><p>theme中修改为yilia，如下</p><p><a href="/../images/%E5%9F%BA%E4%BA%8Ehexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/4.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" data-src="/../images/%E5%9F%BA%E4%BA%8Ehexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/4.png" class="lazyload" title="img"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></div><p>之后可在本地<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>查看</p><p>将博客部署到远端：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></div><p>每次进行主题切换后都需在cmd中巧如上四条命令，等待2分钟左右即可查看</p><h3 id="3-2-butterfly主题切换"><a href="#3-2-butterfly主题切换" class="headerlink" title="3.2 butterfly主题切换"></a>3.2 butterfly主题切换</h3><p>下载主题到themes/butterfly文件下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b dev https:&#x2F;&#x2F;github.com&#x2F;jerryc127&#x2F;hexo-theme-butterfly.git themes&#x2F;Butterfly</span><br></pre></td></tr></table></figure></div><p>主题应用（修改blog/_config文件）</p><p>theme中修改为butterfly</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></div><p>之后可在本地<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>查看</p><p>将博客部署到远端：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></div><p>每次进行主题切换后都需在cmd中巧如上四条命令，等待2分钟左右即可查看</p><p><strong>注意！！！</strong></p><p>在执行hexo g和hexo s的时候可能出现问题，参考【<a href="https://www.cnblogs.com/ldu-xingjiahui/p/12594025.html" target="_blank" rel="noopener">解决方案</a>】</p><p>hexo g执行出错解决方法：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cheerio@0.22.0 --save</span><br></pre></td></tr></table></figure></div><p>hexo s执行出错解决方法：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br></pre></td></tr></table></figure></div><p>但是我的博客按照如上方法尝试后hexo s出现的问题还是没有解决，于是将代码改为如下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br></pre></td></tr></table></figure></div><p><strong>成功！</strong></p><p>部署成功后对于一些基本设置的修改【<a href="https://www.larscheng.com/butterfly/" target="_blank" rel="noopener">参考方案</a>】</p><p>效果图如下</p><p><a href="/../images/%E5%9F%BA%E4%BA%8Ehexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/5.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" data-src="/../images/%E5%9F%BA%E4%BA%8Ehexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/5.png" class="lazyload" title="img"></a></p><h2 id="4、写md文件时的一些坑"><a href="#4、写md文件时的一些坑" class="headerlink" title="4、写md文件时的一些坑"></a>4、写md文件时的一些坑</h2><h3 id="4-1-修改Typora的设置"><a href="#4-1-修改Typora的设置" class="headerlink" title="4.1 修改Typora的设置"></a>4.1 修改Typora的设置</h3><p>文件–&gt;偏好设置–&gt;图片插入</p><p><a href="/../images/%E5%9F%BA%E4%BA%8Ehexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/6.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" data-src="/../images/%E5%9F%BA%E4%BA%8Ehexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/6.png" class="lazyload" title="img"></a></p><h3 id="4-2-建立图片管理文件夹"><a href="#4-2-建立图片管理文件夹" class="headerlink" title="4.2 建立图片管理文件夹"></a>4.2 建立图片管理文件夹</h3><p>1、在<strong>blog\source\images\基于hexo博客搭建</strong>路径下放入图片</p><p>2、在<strong>blog\source_posts\assets\基于hexo博客搭建</strong>路径下放入图片</p><p>一定要在这两个地方放入相同的图片，否则显示不成功</p><h3 id="4-3-路径选择"><a href="#4-3-路径选择" class="headerlink" title="4.3 路径选择"></a>4.3 路径选择</h3><p>如果要部署到远端一定要选择相对路径的方式，添加上述images的文件夹图片就能显示成功</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![img](&#x2F;..&#x2F;images&#x2F;基于hexo博客搭建&#x2F;5.png)</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、下载nodejs并安装&quot;&gt;&lt;a href=&quot;#1、下载nodejs并安装&quot; class=&quot;headerlink&quot; title=&quot;1、下载nodejs并安装&quot;&gt;&lt;/a&gt;1、下载nodejs并安装&lt;/h2&gt;&lt;p&gt;下载地址：&lt;a href=&quot;nodejs.org&quot;&gt;
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
